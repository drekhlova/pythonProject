# Структурное программирование
# Определение функции поиска минимального элемента в списке.
def find_min_index(arr, start_index):
    # Инициализация переменной min_index с текущим значением start_index.
    min_index = start_index

    # Внутренний цикл для поиска минимального элемента в оставшейся части списка.
    for j in range(start_index + 1, len(arr)):
        # Проверка, является ли элемент с индексом j меньшим, чем элемент с индексом min_index.
        if arr[j] < arr[min_index]:
            # Если условие выполняется, обновляем min_index.
            min_index = j

    # Возвращаем индекс минимального элемента.
    return min_index


# Определение функции selection_sort, которая принимает список arr в качестве параметра.
def selection_sort(arr):
    # Вычисление длины списка arr и сохранение в переменной n.
    n = len(arr)

    # Внешний цикл от 0 до n-1 для прохода по всем элементам списка arr.
    for i in range(n):
        # Вызов функции find_min_index для поиска минимального элемента в оставшейся части списка.
        min_index = find_min_index(arr, i)

        # После завершения внутреннего цикла меняем местами элементы arr[i] и arr[min_index],
        # чтобы поместить минимальный элемент на правильную позицию в отсортированной части списка.
        arr[i], arr[min_index] = arr[min_index], arr[i]


# Создание списка my_array с неупорядоченными значениями.
my_array = [64, 34, 25, 12, 22, 11, 90]

# Вызов функции selection_sort для сортировки списка my_array.
selection_sort(my_array)

# Вывод отсортированного списка.
print("Отсортированный массив (Selection Sort):", my_array)


# # Определение функции selection_sort, которая принимает список arr в качестве параметра.
# def selection_sort(arr):
#     # Вычисление длины списка arr и сохранение в переменной n.
#     n = len(arr)
#
#     # Внешний цикл от 0 до n-1 для прохода по всем элементам списка arr.
#     for i in range(n):
#         # Инициализация переменной min_index с текущим значением i.
#         min_index = i
#
#         # Внутренний цикл для поиска минимального элемента в оставшейся части списка.
#         for j in range(i + 1, n):
#             # Проверка, является ли элемент с индексом j меньшим, чем элемент с индексом min_index.
#             if arr[j] < arr[min_index]:
#                 # Если условие выполняется, обновляем min_index.
#                 min_index = j
#
#         # После завершения внутреннего цикла меняем местами элементы arr[i] и arr[min_index],
#         # чтобы поместить минимальный элемент на правильную позицию в отсортированной части списка.
#         arr[i], arr[min_index] = arr[min_index], arr[i]
#
#
# # Создание списка my_array с неупорядоченными значениями.
# my_array = [64, 34, 25, 12, 22, 11, 90]
#
# # Вызов функции selection_sort для сортировки списка my_array.
# selection_sort(my_array)
#
# # Вывод отсортированного списка.
# print("Отсортированный массив (Selection Sort):", my_array)